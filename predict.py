import pandas as pdimport numpy as npimport seaborn as snsimport matplotlib.pyplot as pltfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LogisticRegressionfrom sklearn.metrics import accuracy_score#Load data filestrain = pd.read_csv("train_ctrUa4K.csv")test = pd.read_csv("test_lAUu6dG.csv")#Make a copy of data filestrain_original = train.copy()test_original = test.copy()#Fill Null valuestrain['Gender'].fillna(train['Gender'].mode()[0], inplace=True)train['Married'].fillna(train['Married'].mode()[0], inplace=True)train['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)train['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)train['LoanAmount'].fillna(train['LoanAmount'].mean(), inplace=True)train['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)train["Loan_Amount_Term"].fillna(train["Loan_Amount_Term"].mode()[0], inplace=True)#Drop unnecessary columnstrain = train.drop('Loan_ID', axis=1)test = test.drop('Loan_ID', axis=1)X = train.drop('Loan_Status', axis=1)y = train['Loan_Status']#Fill dummy valuesX = pd.get_dummies(X)train = pd.get_dummies(train)test = pd.get_dummies(test)#Fill Null valuestest['LoanAmount'].fillna(test['LoanAmount'].mean(), inplace=True)test['Credit_History'].fillna(test['Credit_History'].mode()[0], inplace=True)test["Loan_Amount_Term"].fillna(test["Loan_Amount_Term"].mode()[0], inplace=True)#Split training and testing datax_train, x_cv, y_train, y_cv = train_test_split(X, y, test_size=0.3)#Logistic Regression Modelmodel = LogisticRegression()model.fit(x_train, y_train)#Train the modelLogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1, penalty='l2', random_state=1, solver='sag', tol=0.0001, verbose=0, warm_start=False)pred_test = model.predict(test)submission = pd.read_csv("sample_submission_49d68Cx.csv")submission['Loan_Status'] = pred_testsubmission['Loan_ID'] = test_original['Loan_ID']submission['Loan_Status'].replace(0, 'N', inplace=True)submission['Loan_Status'].replace(1, 'Y', inplace=True)pd.DataFrame(submission, columns=['Loan_ID', 'Loan_Status']).to_csv('logistic.csv')